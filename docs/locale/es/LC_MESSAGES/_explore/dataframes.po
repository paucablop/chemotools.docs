# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, chemotools
# This file is distributed under the same license as the chemotools package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: chemotools \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-03 02:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/_explore/dataframes.rst:2
msgid "Working with DataFrames"
msgstr ""

#: ../../source/_explore/dataframes.rst:4
msgid ""
"For the ``pandas.DataFrame`` and ``polars.DataFrame`` lovers. By default,"
" all ``scikit-learn`` and ``chemotools`` transformers output "
"``numpy.ndarray``. However, now it is possible to configure your "
"``chemotools`` preprocessing methods to produce either a "
"``pandas.DataFrame`` or a ``polars.DataFrame`` objects as output. This is"
" possible after implementing the new ``set_output()`` API from ``scikit-"
"learn`` (>= 1.2.2 for ``pandas`` and >= 1.4.0 for ``polars``) "
"(`documentation <https://scikit-"
"learn.org/stable/auto_examples/miscellaneous/plot_set_output.html>`_). "
"The same API implemented in other ``scikit-learn`` preprocessing methods "
"like the ``StandardScaler()`` is now available for the ``chemotools`` "
"transformers."
msgstr ""

#: ../../source/_explore/dataframes.rst:7
msgid ""
"From version 0.1.3, the ``set_output()`` is available for all "
"``chemotools`` functions!"
msgstr ""

#: ../../source/_explore/dataframes.rst:9
msgid "Below there are two examples of how to use this new API:"
msgstr ""

#: ../../source/_explore/dataframes.rst:12
msgid ""
"**Example 1: Using the set_output() API with a single preprocessing "
"method**"
msgstr ""

#: ../../source/_explore/dataframes.rst:15
msgid "1. Load your spectral data as a ``pandas.DataFrame``"
msgstr ""

#: ../../source/_explore/dataframes.rst:17
msgid ""
"First load your spectral data. In this case, we assume a file called "
"``spectra.csv`` where each row represents a spectrum and each column "
"represents wavenumbers."
msgstr ""

#: ../../source/_explore/dataframes.rst:27
msgid ""
"The ``spectra`` variable is a ``pandas.DataFrame`` object with the "
"indices representing the sample names and the columns representing the "
"wavenumbers."
msgstr ""

#: ../../source/_explore/dataframes.rst:30
msgid ""
"2. Create a ``chemotools`` preprocessing object and set the output to "
"``pandas``"
msgstr ""

#: ../../source/_explore/dataframes.rst:32
msgid "Next, we create the ``AirPls`` object and set the output to ``pandas``."
msgstr ""

#: ../../source/_explore/dataframes.rst:39
msgid "The ``set_output()`` method accepts the following arguments:"
msgstr ""

#: ../../source/_explore/dataframes.rst:41
msgid ""
"``transform``: The output format. Can be ``'pandas'`` or ``'default'`` "
"(the default format will output a ``numpy.ndarray``)."
msgstr ""

#: ../../source/_explore/dataframes.rst:44
msgid ""
"If you wanted to set the output to ``polars`` you would use "
"``transform='polars'`` in the ``set_output()`` method "
"(``AirPLS().set_output(transform='polars')``)."
msgstr ""

#: ../../source/_explore/dataframes.rst:47
msgid "3. Fit and transform the spectra"
msgstr ""

#: ../../source/_explore/dataframes.rst:54
msgid ""
"The output of the ``fit_transform()`` method is now a "
"``pandas.DataFrame`` object."
msgstr ""

#: ../../source/_explore/dataframes.rst:57
msgid ""
"Notice that by default the indices and the columns of the input data are "
"not maintained to the output, and the ``spectra_airpls`` DataFrame has "
"default indices and columns."
msgstr ""

#: ../../source/_explore/dataframes.rst:60
msgid "**Example 2: Using the set_output() API with a pipeline**"
msgstr ""

#: ../../source/_explore/dataframes.rst:62
msgid ""
"Similarly, the ``set_output()`` API can be used with pipelines. The "
"following code shows how to create a pipeline that performs:"
msgstr ""

#: ../../source/_explore/dataframes.rst:64
msgid "Multiplicative scatter correction"
msgstr ""

#: ../../source/_explore/dataframes.rst:65
msgid "Standard scaling"
msgstr ""

#: ../../source/_explore/dataframes.rst:84
msgid ""
"If you wanted to set the output to ``polars`` you would use "
"``transform='polars'`` in the ``set_output()`` method "
"(``pipeline.set_output(transform='polars')``)."
msgstr ""

