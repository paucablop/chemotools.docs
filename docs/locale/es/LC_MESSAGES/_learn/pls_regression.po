# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, chemotools
# This file is distributed under the same license as the chemotools package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: chemotools \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-03 02:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/_learn/pls_regression.ipynb:9
msgid "**Glucose monitoring with PLS**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:20
msgid ""
"ðŸ’¡\\ **NOTE:** This document is a Jupyter notebook. You can download the "
"source file and run it in your Jupyter environment!"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:32
msgid "**Introduction**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:34
msgid ""
"This dataset provides information on lignocellulosic ethanol fermentation"
" through spectroscopic data collected data using attenuated total "
"reflectance, mid-infrared (ATR-MIR) spectroscopy, along with reference "
"measurements using high-performance liquid chromatography (HPLC) for "
"validation."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:36
msgid "The project contains two datasets:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:38
msgid ""
"**Training Dataset:** Contains spectral data with corresponding HPLC "
"measurements used to train the partial least squares (PLS) models."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:39
msgid ""
"**Testing Dataset:** Includes a time series of spectra collected during "
"fermentation, plus off-line HPLC measurements."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:41
msgid ""
"For more information about these datasets and how they can be used to "
"monitor fermentation, please see our article: \"Transforming Data to "
"Information: A Parallel Hybrid Model for Real-Time State Estimation in "
"Lignocellulosic Ethanol Fermentation.\" (Note that the data in the "
"article differs from the data provided here.)"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:53
msgid "**Objective**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:55
msgid ""
"In this exercise, you will build a PLS model to monitor glucose "
"concentration in real-time using ATR-MIR spectroscopy. You'll train the "
"model using a small training set of spiked spectra, then test its "
"performance with spectra from an actual fermentation process."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:67
msgid "**Before starting**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:69
msgid ""
"Before we start, you need to be sure to have the following dependencies "
"installed:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:79
msgid "You can install them using"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:99
msgid "**Loading the training data**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:101
msgid ""
"You can access the from the ``chemotools.datasets`` module with the "
"``load_fermentation_train()`` function."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:123
msgid ""
"The ``load_fermentation_train()`` function returns two "
"``pandas.DataFrame``:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:125
msgid ""
"``spectra``: This dataframe contains spectral data, with columns "
"representing wavenumbers and rows representing samples."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:127
msgid ""
"``hplc``: Here, youâ€™ll find reference HPLC measurements for the glucose "
"concentration (in g/L) of each sample, stored in a single column labeled "
"``glucose``."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:131
msgid ""
"ðŸ’¡\\ **NOTE:** If you are interested in working with ``polars.DataFrame`` "
"you can simply use ``load_fermentation_train(set_output=\"polars\")``. "
"Note that if you choose to work with ``polars.DataFrame`` the wavenumbers"
" are given in the column names as ``str`` and not as ``float``. This is "
"because ``polars`` does not support column names with types other than "
"``str``. To extract the wavenumbers as ``float`` from the "
"``polars.DataFrame`` you can use the "
"``df.columns.to_numpy(dtype=np.float64)`` method."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:144
msgid "**Exploring the training data**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:146
msgid ""
"Before starting with data modeling, itâ€™s important to get familiar with "
"your data. Let's start by answering some basic questions:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:148
msgid "*How many samples are there?*"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:149
msgid "*and how many wavenumbers are available?*"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:197
msgid "Now that we have the basics down, letâ€™s take a closer look at the data."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:199
msgid ""
"For the spectral data, you can use the ``pandas.DataFrame.head()`` method"
" to examine the first 5 rows:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:483
msgid ""
"For brevity, we wonâ€™t display the entire table here, but youâ€™ll notice "
"that each column corresponds to a wavenumber, and each row represents a "
"sample."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:485
msgid ""
"Turning to the HPLC data, the ``pandas.DataFrame.describe()`` method "
"provides a summary of the glucose column:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:621
msgid ""
"This summary offers insights into the distribution of the glucose "
"concentration. With this practical knowledge, we are now ready to "
"continue with our data modeling journey."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:633
msgid "**Visualizing the training data**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:635
msgid ""
"To better understand our dataset, we will visualize the data. We will "
"plot the spectra in the train dataset, with each spectrum color-coded to "
"reflect its associated glucose concentration. This visual approach "
"provides a didactic means to understand the datasetâ€™s characteristics, "
"offering insights into chemical variations among the samples. To do so, "
"weâ€™ll use the ``matplotlib.pyplot`` module. Remember to install it first "
"using:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:641
msgid ""
"Up until now, we have used ``pandas.DataFrame`` to represent the dataset."
" ``pandas.DataFrame`` are great for storing and manipulating many large "
"datasets. However, I often find more convenient to use ``numpy.ndarray`` "
"to work with spectral data. Therefore, we will convert the "
"``pandas.DataFrame`` to ``numpy.ndarray`` using the "
"``pandas.DataFrame.to_numpy()`` method."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:643
msgid ""
"So our first step will be to transform our ``pandas.DataFrame`` to "
"``numpy.ndarray``:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:672
msgid ""
"Before plotting our data, we'll create a dedicated plotting function that"
" color-codes each spectrum according to its glucose concentration. This "
"approach helps visualize the relationship between spectral patterns and "
"glucose levels."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:674
msgid "The function will implement:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:676
msgid ""
"**Color normalization**: We'll use ``matplotlib.colors.Normalize`` to "
"scale glucose concentration values to a 0-1 range, making them suitable "
"for color mapping."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:678
msgid ""
"**Color mapping**: The normalized values will be mapped to colors using a"
" color map via ``matplotlib.cm.ScalarMappable``."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:680
msgid ""
"**Colorbar**: We'll add a colorbar to indicate how colors correspond to "
"glucose concentration values."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:682
msgid ""
"This visualization allows us to compare multiple spectra based on their "
"associated glucose concentrations."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:759
msgid "We can now use this function to plot the training dataset:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:787
msgid ""
"These spectra may look unclear because they cover a wide wavenumber range"
" that includes areas with little chemical information. To get a better "
"view, we should focus on the \"fingerprint\" region between 950 and 1550 "
"cm-1, where the important chemical features appear. For now, we'll use "
"the zoom_in=True parameter in our plot_spectra() function to focus on "
"this region. Later, we'll learn how to properly trim the spectra using "
"preprocessing functions."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:817
msgid "**Preprocessing the training data**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:819
msgid ""
"Now that you've explored the dataset, it's time to preprocess the "
"spectral data. This step is essential for removing unwanted variations, "
"such as baseline shifts and noise, which can negatively impact model "
"performance. We'll use the ``chemotools`` and the ``scikit-learn`` "
"modules to preprocess the spectral data."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:821
msgid "We will preprocess the spectra using the following steps:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:823
msgid ""
"`Range Cut "
"<https://paucablop.github.io/chemotools/docs/feature_selection.html"
"#range-cut>`__: to remove the wavenumbers outside the range between 950 "
"and 1550 cm-1."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:825
msgid ""
"`Linear Correction "
"<https://paucablop.github.io/chemotools/docs/baseline.html#linear-"
"baseline-correction>`__: to remove the linear baseline shift."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:827
msgid ""
"`Savitzky-Golay "
"<https://paucablop.github.io/chemotools/docs/derivative.html#savitzky-"
"golay-derivative>`__: calculates the nth order derivative of the spectra "
"using the Savitzky-Golay method. This is useful to remove additive and "
"multiplicative scatter effects."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:829
msgid ""
"`Standard Scaler <https://scikit-"
"learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html>`__:"
" to scale the spectra to zero mean."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:840
msgid ""
"We will chain the preprocessing steps using the ```make_pipeline()`` "
"<https://scikit-"
"learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html>`__"
" function from ``scikit-learn``."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:842
msgid ""
"ðŸ’¡ **NOTE:** *What is a pipeline?* A pipeline is a sequence of steps that "
"are executed in a specific order. In our case, we will create a pipeline "
"that will execute the preprocessing steps in the order described above. "
"You can find more information on working with pipelines at our "
"`documentation page <https://paucablop.github.io/chemotools/get-"
"started/scikit_learn_integration.html#working-with-pipelines>`__."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:875
msgid "Now we can use the preprocessing pipeline to preprocess the spectra:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:895
msgid ""
"And we can use the ``plot_spectra()`` function to plot the preprocessed "
"spectra:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:928
msgid ""
"ðŸ’¡ **NOTE:** This is cool! See how we are integrating chemometrics with "
"scikit-learn? ``RangeCut`` ``LinearCorrection`` and ``SavitizkyGolay`` "
"are all preprocessing techniques implemented in ``chemotools`` while "
"``StandardScaler`` and ``pipelines`` are functionalities provided by "
"``scikit-learn`` This is the power of ``chemotools``â€” it is designed to "
"work seamlessly with ``scikit-learn``"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:940
msgid "**Training a PLS model**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:951
msgid ""
"Partial Least Squares (PLS) is a powerful regression technique commonly "
"used in chemometrics. It works by finding a latent space representation "
"that maximizes covariance with the target variable."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:953
msgid ""
"A critical parameter in PLS modeling is the number of components "
"(dimensions) in the latent space:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:955
msgid ""
"Too many components leads to overfitting, where the model captures noise "
"rather than signal"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:956
msgid ""
"Too few components results in underfitting, missing important patterns in"
" the data"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:958
msgid ""
"When working with limited samples, cross-validation provides a reliable "
"method for selecting the optimal number of components. This approach:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:960
msgid "Divides the data into training and validation sets"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:961
msgid ""
"Trains the model on the training set and evaluates it on the validation "
"set"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:962
msgid "Repeats this process with different data splits"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:963
msgid "Averages the results to estimate the model's generalization error"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:965
msgid ""
"For our analysis, we'll use scikit-learn's ``GridSearchCV`` class to "
"systematically test different component numbers through cross-validation."
" This will identify the optimal complexity for our PLS model based on "
"performance metrics across multiple data splits."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1030
msgid ""
"Suggesting that the optimal number of components is 6, with a mean "
"absolute error of 0.92 g/L. We can verify this by plotting the mean "
"absolute error as a function of the number of components:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1064
msgid ""
"Even though using the number of components that minimize the mean "
"absolute error is a good starting point, it is not always the best. The "
"model with 6 components does not increase the mean absolute error much "
"compared to the model with 3 or even two components. However, the model "
"with 6 components includes components associated with small eigenvalues, "
"which are more uncertain. This means that models with 3 or 2 components "
"might be more robust. Therefore, it is always a good idea to try "
"different numbers of components and select the one that gives the best "
"performance. However, for now we will train the model with 6 components:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1540
msgid "Finally we can evaluate the performance of the model on the training set:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1581
msgid "**Applying the model**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1583
msgid ""
"Now that we have trained our model, we can apply it to the testing "
"dataset. The testing dataset contains spectra recorded in real-time "
"during the fermentation process. The test dataset contains two "
"``pandas.DataFrame``:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1585
msgid ""
"``spectra``: This dataset contains spectral data, with columns "
"representing wavenumbers and rows representing samples. These spectra "
"were recorded in real-time during the fermentation process approximately "
"every 1.5 minutes."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1587
msgid ""
"``hplc``: This dataset contains HPLC measurements, specifically glucose "
"concentrations (in g/L), stored in a single column labeled ``glucose``. "
"These measurements were recorded off-line approximately every 60 minutes."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1589
msgid ""
"We will use the ``load_fermentation_test()`` function from the "
"``chemotools.datasets`` module to load the testing dataset:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1611
msgid ""
"Then, we will preprocess the spectra using the same preprocessing "
"pipeline that we used for the training dataset:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1635
msgid "Finally, we can use the PLS model to predict the glucose concentrations:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1656
msgid ""
"We can use the predicted values to plot the spectra color-coded according"
" to the predicted glucose concentrations:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1684
msgid ""
"Now we can compare the predicted glucose concentrations with the off-line"
" HPLC measurements. We will plot the predictions and the off-line "
"measurements over time. Each spectrum was taken every 1.25 minutes, while"
" the off-line measurements were taken every 60 minutes."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1727
msgid "**Recap**"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1738
msgid ""
"In this tutorial, we embarked on a journey into the realm of machine "
"learning for spectroscopic data analysis, focusing on the Fermentation "
"dataset. We covered essential steps in building a regression model to "
"predict glucose concentrations during lignocellulosic ethanol "
"fermentation. Hereâ€™s a brief recap of what we accomplished:"
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1740
msgid ""
"**Introduction:** We introduced the Fermentation dataset, which consists "
"of spectral data obtained through attenuated total reflectance, mid-"
"infrared spectroscopy (ATR-MIR), and HPLC reference data. We highlighted "
"the importance of this dataset in understanding real-time fermentation "
"processes."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1742
msgid ""
"**Loading and Exploring Data:** We loaded the training dataset, explored "
"its dimensions, and gained insights into both spectral and HPLC data. "
"Understanding your data is a crucial first step in any data analysis "
"project."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1744
msgid ""
"**Visualizing Data:** We used data visualization to gain a deeper "
"understanding of the dataset. By plotting the spectra color-coded by "
"glucose concentration, we visually examined the chemical variations among"
" samples."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1746
msgid ""
"**Preprocessing Data:** We applied preprocessing techniques, such as "
"range cutting, linear correction, Savitzky-Golay derivative, and standard"
" scaling, to prepare the spectral data for modeling. This step removed "
"unwanted variations and enhanced the dataâ€™s quality."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1748
msgid ""
"**Model Training:** We trained a Partial Least Squares (PLS) regression "
"model to predict glucose concentrations. We used cross-validation to find"
" the optimal number of components and assessed model performance."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1750
msgid ""
"**Application to Testing Data:** We extended our model to predict glucose"
" concentrations in real-time by applying it to the testing dataset. This "
"allowed us to monitor glucose levels during fermentation."
msgstr ""

#: ../../source/_learn/pls_regression.ipynb:1752
msgid ""
"This tutorial provides a solid foundation for anyone interested in using "
"machine learning techniques for spectroscopic data analysis. By following"
" these steps, you can gain valuable insights from complex spectral data "
"and make predictions that can be applied in real-world applications. "
"Happy analyzing!"
msgstr ""

